---
  name: Build and Test

  on:
    pull_request:
      branches: [main]
      paths:
        - '**/Dockerfile'
        - '**/.dockerignore'
        - .github/**
        - '**.go'
        - '**.mod'
        - '**.sum'
        - config/**
        - '**/Makefile*'
        - '**/documentation.md'
        - .golangci.yaml
        - .goreleaser.yaml
  
    push:
      branches: [main]
  
  jobs:
    go-semantic-release:
      if: ${{ github.ref == 'refs/heads/main' }}
      runs-on:
        ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Clone repository
          uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          with:
            fetch-depth: 0
        - name: Get next version
          id: get_next_version
          uses: thenativeweb/get-next-version@f9202b1ab94b345e7ca86da624762a5e17d4cd3e # v2.6.2
          with:
            prefix: v   # optional, defaults to ''
        - name: Show the next version
          run: |
            echo ${{ steps.get_next_version.outputs.version }}
        - name: Install tools
          run: make install-tools
        - name: Update VERSION file
          run: |
            new_version=${{ steps.get_next_version.outputs.version }}
            sed -i "s/version: .*/version: ${new_version}/" versions.yaml



        - name: Set Git user to the commit author #This is so multimod prerelease can get author info
          run: |
            git config --global user.name "${{ github.event.head_commit.committer.name }}"
            git config --global user.email "${{ github.event.head_commit.committer.email }}"

        - name: Stage changes
          run: git add .
      
        - name: Commit changes
          id: commit_step  # Adding an ID to reference this step later
          run: |
            git commit -m "Automated commit: prepare for multimod (version ${{ steps.get_next_version.outputs.version }})" || echo "Nothing to commit"
            echo "::set-output name=commit::$(if git rev-parse --verify HEAD >/dev/null 2>&1; then echo success; else echo failure; fi)"
          continue-on-error: true  # This allows the workflow to continue even if the commit command fails

        - name: Multimod prerelease
          if: steps.commit_step.outputs.commit == 'success' 
          run: make multimod-prerelease
        
        - name: Push changes
          if: steps.commit_step.outputs.commit == 'success'
          run: git push origin main
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        





