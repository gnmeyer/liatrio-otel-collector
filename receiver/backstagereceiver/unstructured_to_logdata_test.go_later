// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package backstagereceiver // import "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/backstagereceiver"

import (
	"fmt"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	semconv "go.opentelemetry.io/collector/semconv/v1.9.0"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func TestUnstructuredListToLogData(t *testing.T) {
	t.Parallel()

	t.Run("Test namespaced objects", func(t *testing.T) {
		objects := unstructured.UnstructuredList{
			Items: []unstructured.Unstructured{},
		}
		namespaces := []string{"ns1", "ns1", "ns2", "ns2"}
		for i, namespace := range namespaces {
			object := unstructured.Unstructured{}
			object.SetKind("Pod")
			object.SetNamespace(namespace)
			object.SetName(fmt.Sprintf("pod-%d", i))
			objects.Items = append(objects.Items, object)
		}

		config := &BackstageConfig{
			gvr: &schema.GroupVersionResource{
				Group:    "backstage.io",
				Version:  "v1alpha1",
				Resource: "components",
			},
		}
		logs := pullObjectsToLogData(&objects, time.Now(), config)

		assert.Equal(t, logs.LogRecordCount(), 4)

		resourceLogs := logs.ResourceLogs()
		assert.Equal(t, resourceLogs.Len(), 2)

		namespaces = []string{"ns1", "ns2"}
		for i, namespace := range namespaces {
			rl := resourceLogs.At(i)
			resourceAttributes := rl.Resource().Attributes()
			ns, _ := resourceAttributes.Get(semconv.AttributeK8SNamespaceName)
			assert.Equal(t, ns.AsString(), namespace)
			assert.Equal(t, rl.ScopeLogs().Len(), 1)
			assert.Equal(t, rl.ScopeLogs().At(0).LogRecords().Len(), 2)
		}
	})

	t.Run("Test non-namespaced objects", func(t *testing.T) {
		objects := unstructured.UnstructuredList{
			Items: []unstructured.Unstructured{},
		}
		for i := 0; i < 3; i++ {
			object := unstructured.Unstructured{}
			object.SetKind("Node")
			object.SetName(fmt.Sprintf("node-%d", i))
			objects.Items = append(objects.Items, object)
		}

		config := &BackstageConfig{
			gvr: &schema.GroupVersionResource{
				Group:    "backstage.io",
				Version:  "v1alpha1",
				Resource: "components",
			},
		}

		logs := pullObjectsToLogData(&objects, time.Now(), config)

		assert.Equal(t, logs.LogRecordCount(), 3)

		resourceLogs := logs.ResourceLogs()
		assert.Equal(t, resourceLogs.Len(), 1)
		rl := resourceLogs.At(0)
		resourceAttributes := rl.Resource().Attributes()
		logRecords := rl.ScopeLogs().At(0).LogRecords()
		_, ok := resourceAttributes.Get(semconv.AttributeK8SNamespaceName)
		assert.Equal(t, ok, false)
		assert.Equal(t, rl.ScopeLogs().Len(), 1)
		assert.Equal(t, logRecords.Len(), 3)

	})
}
